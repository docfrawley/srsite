{"ast":null,"code":"\"use strict\";\n\nvar _utils = require(\"./utils\");\n\nconst defineType = (0, _utils.defineAliasedType)(\"JSX\");\ndefineType(\"JSXAttribute\", {\n  visitor: [\"name\", \"value\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertNodeType)(\"JSXIdentifier\", \"JSXNamespacedName\")\n    },\n    value: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)(\"JSXElement\", \"JSXFragment\", \"StringLiteral\", \"JSXExpressionContainer\")\n    }\n  }\n});\ndefineType(\"JSXClosingElement\", {\n  visitor: [\"name\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertNodeType)(\"JSXIdentifier\", \"JSXMemberExpression\", \"JSXNamespacedName\")\n    }\n  }\n});\ndefineType(\"JSXElement\", {\n  builder: [\"openingElement\", \"closingElement\", \"children\", \"selfClosing\"],\n  visitor: [\"openingElement\", \"children\", \"closingElement\"],\n  aliases: [\"Immutable\", \"Expression\"],\n  fields: Object.assign({\n    openingElement: {\n      validate: (0, _utils.assertNodeType)(\"JSXOpeningElement\")\n    },\n    closingElement: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)(\"JSXClosingElement\")\n    },\n    children: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"JSXText\", \"JSXExpressionContainer\", \"JSXSpreadChild\", \"JSXElement\", \"JSXFragment\")))\n    }\n  }, {\n    selfClosing: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    }\n  })\n});\ndefineType(\"JSXEmptyExpression\", {});\ndefineType(\"JSXExpressionContainer\", {\n  visitor: [\"expression\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    expression: {\n      validate: (0, _utils.assertNodeType)(\"Expression\", \"JSXEmptyExpression\")\n    }\n  }\n});\ndefineType(\"JSXSpreadChild\", {\n  visitor: [\"expression\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    expression: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\ndefineType(\"JSXIdentifier\", {\n  builder: [\"name\"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    }\n  }\n});\ndefineType(\"JSXMemberExpression\", {\n  visitor: [\"object\", \"property\"],\n  fields: {\n    object: {\n      validate: (0, _utils.assertNodeType)(\"JSXMemberExpression\", \"JSXIdentifier\")\n    },\n    property: {\n      validate: (0, _utils.assertNodeType)(\"JSXIdentifier\")\n    }\n  }\n});\ndefineType(\"JSXNamespacedName\", {\n  visitor: [\"namespace\", \"name\"],\n  fields: {\n    namespace: {\n      validate: (0, _utils.assertNodeType)(\"JSXIdentifier\")\n    },\n    name: {\n      validate: (0, _utils.assertNodeType)(\"JSXIdentifier\")\n    }\n  }\n});\ndefineType(\"JSXOpeningElement\", {\n  builder: [\"name\", \"attributes\", \"selfClosing\"],\n  visitor: [\"name\", \"attributes\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertNodeType)(\"JSXIdentifier\", \"JSXMemberExpression\", \"JSXNamespacedName\")\n    },\n    selfClosing: {\n      default: false\n    },\n    attributes: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"JSXAttribute\", \"JSXSpreadAttribute\")))\n    },\n    typeParameters: {\n      validate: (0, _utils.assertNodeType)(\"TypeParameterInstantiation\", \"TSTypeParameterInstantiation\"),\n      optional: true\n    }\n  }\n});\ndefineType(\"JSXSpreadAttribute\", {\n  visitor: [\"argument\"],\n  fields: {\n    argument: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\ndefineType(\"JSXText\", {\n  aliases: [\"Immutable\"],\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    }\n  }\n});\ndefineType(\"JSXFragment\", {\n  builder: [\"openingFragment\", \"closingFragment\", \"children\"],\n  visitor: [\"openingFragment\", \"children\", \"closingFragment\"],\n  aliases: [\"Immutable\", \"Expression\"],\n  fields: {\n    openingFragment: {\n      validate: (0, _utils.assertNodeType)(\"JSXOpeningFragment\")\n    },\n    closingFragment: {\n      validate: (0, _utils.assertNodeType)(\"JSXClosingFragment\")\n    },\n    children: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"JSXText\", \"JSXExpressionContainer\", \"JSXSpreadChild\", \"JSXElement\", \"JSXFragment\")))\n    }\n  }\n});\ndefineType(\"JSXOpeningFragment\", {\n  aliases: [\"Immutable\"]\n});\ndefineType(\"JSXClosingFragment\", {\n  aliases: [\"Immutable\"]\n});","map":{"version":3,"names":["_utils","require","defineType","defineAliasedType","visitor","aliases","fields","name","validate","assertNodeType","value","optional","builder","Object","assign","openingElement","closingElement","children","chain","assertValueType","assertEach","selfClosing","expression","object","property","namespace","default","attributes","typeParameters","argument","openingFragment","closingFragment"],"sources":["/Users/docfrawley/Sites/NVoge/srsite/node_modules/@babel/types/lib/definitions/jsx.js"],"sourcesContent":["\"use strict\";\n\nvar _utils = require(\"./utils\");\n\nconst defineType = (0, _utils.defineAliasedType)(\"JSX\");\ndefineType(\"JSXAttribute\", {\n  visitor: [\"name\", \"value\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertNodeType)(\"JSXIdentifier\", \"JSXNamespacedName\")\n    },\n    value: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)(\"JSXElement\", \"JSXFragment\", \"StringLiteral\", \"JSXExpressionContainer\")\n    }\n  }\n});\ndefineType(\"JSXClosingElement\", {\n  visitor: [\"name\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertNodeType)(\"JSXIdentifier\", \"JSXMemberExpression\", \"JSXNamespacedName\")\n    }\n  }\n});\ndefineType(\"JSXElement\", {\n  builder: [\"openingElement\", \"closingElement\", \"children\", \"selfClosing\"],\n  visitor: [\"openingElement\", \"children\", \"closingElement\"],\n  aliases: [\"Immutable\", \"Expression\"],\n  fields: Object.assign({\n    openingElement: {\n      validate: (0, _utils.assertNodeType)(\"JSXOpeningElement\")\n    },\n    closingElement: {\n      optional: true,\n      validate: (0, _utils.assertNodeType)(\"JSXClosingElement\")\n    },\n    children: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"JSXText\", \"JSXExpressionContainer\", \"JSXSpreadChild\", \"JSXElement\", \"JSXFragment\")))\n    }\n  }, {\n    selfClosing: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      optional: true\n    }\n  })\n});\ndefineType(\"JSXEmptyExpression\", {});\ndefineType(\"JSXExpressionContainer\", {\n  visitor: [\"expression\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    expression: {\n      validate: (0, _utils.assertNodeType)(\"Expression\", \"JSXEmptyExpression\")\n    }\n  }\n});\ndefineType(\"JSXSpreadChild\", {\n  visitor: [\"expression\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    expression: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\ndefineType(\"JSXIdentifier\", {\n  builder: [\"name\"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    }\n  }\n});\ndefineType(\"JSXMemberExpression\", {\n  visitor: [\"object\", \"property\"],\n  fields: {\n    object: {\n      validate: (0, _utils.assertNodeType)(\"JSXMemberExpression\", \"JSXIdentifier\")\n    },\n    property: {\n      validate: (0, _utils.assertNodeType)(\"JSXIdentifier\")\n    }\n  }\n});\ndefineType(\"JSXNamespacedName\", {\n  visitor: [\"namespace\", \"name\"],\n  fields: {\n    namespace: {\n      validate: (0, _utils.assertNodeType)(\"JSXIdentifier\")\n    },\n    name: {\n      validate: (0, _utils.assertNodeType)(\"JSXIdentifier\")\n    }\n  }\n});\ndefineType(\"JSXOpeningElement\", {\n  builder: [\"name\", \"attributes\", \"selfClosing\"],\n  visitor: [\"name\", \"attributes\"],\n  aliases: [\"Immutable\"],\n  fields: {\n    name: {\n      validate: (0, _utils.assertNodeType)(\"JSXIdentifier\", \"JSXMemberExpression\", \"JSXNamespacedName\")\n    },\n    selfClosing: {\n      default: false\n    },\n    attributes: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"JSXAttribute\", \"JSXSpreadAttribute\")))\n    },\n    typeParameters: {\n      validate: (0, _utils.assertNodeType)(\"TypeParameterInstantiation\", \"TSTypeParameterInstantiation\"),\n      optional: true\n    }\n  }\n});\ndefineType(\"JSXSpreadAttribute\", {\n  visitor: [\"argument\"],\n  fields: {\n    argument: {\n      validate: (0, _utils.assertNodeType)(\"Expression\")\n    }\n  }\n});\ndefineType(\"JSXText\", {\n  aliases: [\"Immutable\"],\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: (0, _utils.assertValueType)(\"string\")\n    }\n  }\n});\ndefineType(\"JSXFragment\", {\n  builder: [\"openingFragment\", \"closingFragment\", \"children\"],\n  visitor: [\"openingFragment\", \"children\", \"closingFragment\"],\n  aliases: [\"Immutable\", \"Expression\"],\n  fields: {\n    openingFragment: {\n      validate: (0, _utils.assertNodeType)(\"JSXOpeningFragment\")\n    },\n    closingFragment: {\n      validate: (0, _utils.assertNodeType)(\"JSXClosingFragment\")\n    },\n    children: {\n      validate: (0, _utils.chain)((0, _utils.assertValueType)(\"array\"), (0, _utils.assertEach)((0, _utils.assertNodeType)(\"JSXText\", \"JSXExpressionContainer\", \"JSXSpreadChild\", \"JSXElement\", \"JSXFragment\")))\n    }\n  }\n});\ndefineType(\"JSXOpeningFragment\", {\n  aliases: [\"Immutable\"]\n});\ndefineType(\"JSXClosingFragment\", {\n  aliases: [\"Immutable\"]\n});"],"mappings":"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"},"metadata":{},"sourceType":"script"}