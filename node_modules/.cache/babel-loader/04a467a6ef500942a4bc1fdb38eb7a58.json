{"ast":null,"code":"import _objectSpread from \"/Users/docfrawley/Sites/srsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { ref } from 'vue';\nimport { db } from '../firebase/config';\nimport { collection, onSnapshot, query, where } from 'firebase/firestore';\n\nvar getOrderDocs = function getOrderDocs(c, keyField, fieldValue) {\n  var order = ref(0); // register the firestore collection reference\n\n  var colRef = collection(db, c);\n\n  if (keyField === 'course') {\n    colRef = query(colRef, where(\"course\", \"==\", fieldValue));\n  } else {\n    colRef = query(colRef, where(\"module\", \"==\", fieldValue));\n  }\n\n  var unsub = onSnapshot(colRef, function (snap) {\n    var results = [];\n    snap.docs.forEach(function (doc) {\n      // must wait for the server to create the timestamp & send it back\n      results.push(_objectSpread(_objectSpread({}, doc.data()), {}, {\n        id: doc.id\n      }));\n    }); // update values\n\n    order.value = results.length;\n    console.log('results length: ', order.value);\n  });\n  return {\n    order: order\n  };\n};\n\nexport default getOrderDocs;","map":{"version":3,"names":["ref","db","collection","onSnapshot","query","where","getOrderDocs","c","keyField","fieldValue","order","colRef","unsub","snap","results","docs","forEach","doc","push","data","id","value","length","console","log"],"sources":["/Users/docfrawley/Sites/srsite/src/composables/getLength.js"],"sourcesContent":["import { ref } from 'vue'\nimport { db } from '../firebase/config'\nimport { collection, onSnapshot, query, where } from 'firebase/firestore'\n\nconst getOrderDocs = (c, keyField, fieldValue) => {\n\n  const order = ref(0)\n\n  // register the firestore collection reference\n  let colRef = collection(db, c)\n  if (keyField==='course'){\n     colRef = query(colRef, where(\"course\", \"==\", fieldValue))\n  } else {\n    colRef = query(colRef, where(\"module\", \"==\", fieldValue))\n  }\n \n    \n  const unsub = onSnapshot(colRef, snap => {\n    let results = []\n    snap.docs.forEach(doc => {\n      // must wait for the server to create the timestamp & send it back\n      results.push({...doc.data(), id: doc.id})\n    });\n\n    // update values\n    order.value = results.length\n    console.log('results length: ', order.value)\n  })\n  return {order}\n}\n\nexport default getOrderDocs"],"mappings":";;;;AAAA,SAASA,GAAT,QAAoB,KAApB;AACA,SAASC,EAAT,QAAmB,oBAAnB;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,KAAjC,EAAwCC,KAAxC,QAAqD,oBAArD;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,CAAD,EAAIC,QAAJ,EAAcC,UAAd,EAA6B;EAEhD,IAAMC,KAAK,GAAGV,GAAG,CAAC,CAAD,CAAjB,CAFgD,CAIhD;;EACA,IAAIW,MAAM,GAAGT,UAAU,CAACD,EAAD,EAAKM,CAAL,CAAvB;;EACA,IAAIC,QAAQ,KAAG,QAAf,EAAwB;IACrBG,MAAM,GAAGP,KAAK,CAACO,MAAD,EAASN,KAAK,CAAC,QAAD,EAAW,IAAX,EAAiBI,UAAjB,CAAd,CAAd;EACF,CAFD,MAEO;IACLE,MAAM,GAAGP,KAAK,CAACO,MAAD,EAASN,KAAK,CAAC,QAAD,EAAW,IAAX,EAAiBI,UAAjB,CAAd,CAAd;EACD;;EAGD,IAAMG,KAAK,GAAGT,UAAU,CAACQ,MAAD,EAAS,UAAAE,IAAI,EAAI;IACvC,IAAIC,OAAO,GAAG,EAAd;IACAD,IAAI,CAACE,IAAL,CAAUC,OAAV,CAAkB,UAAAC,GAAG,EAAI;MACvB;MACAH,OAAO,CAACI,IAAR,iCAAiBD,GAAG,CAACE,IAAJ,EAAjB;QAA6BC,EAAE,EAAEH,GAAG,CAACG;MAArC;IACD,CAHD,EAFuC,CAOvC;;IACAV,KAAK,CAACW,KAAN,GAAcP,OAAO,CAACQ,MAAtB;IACAC,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCd,KAAK,CAACW,KAAtC;EACD,CAVuB,CAAxB;EAWA,OAAO;IAACX,KAAK,EAALA;EAAD,CAAP;AACD,CAzBD;;AA2BA,eAAeJ,YAAf"},"metadata":{},"sourceType":"module"}