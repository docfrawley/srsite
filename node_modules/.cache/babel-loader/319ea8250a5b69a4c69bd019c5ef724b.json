{"ast":null,"code":"import _objectSpread from \"/Users/docfrawley/Sites/srsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { ref } from 'vue';\nimport { db } from '../firebase/config';\nimport { collection, onSnapshot, query, where, getDoc, doc } from 'firebase/firestore';\n\nvar getLesson = function getLesson(c, mod, ord) {\n  var documents = ref(null);\n  var error = ref(null);\n  var thevid = ref();\n  var theID = ref(); // register the firestore collection reference\n\n  var colRef = collection(db, c);\n  colRef = query(colRef, where(\"module\", \"==\", mod), where(\"order\", \"==\", ord));\n  onSnapshot(colRef, function (snap) {\n    var results = [];\n    snap.docs.forEach(function (doc) {\n      // must wait for the server to create the timestamp & send it back\n      results.push(_objectSpread(_objectSpread({}, doc.data()), {}, {\n        id: doc.id\n      }));\n    }); // update values\n\n    documents.value = results;\n    error.value = null;\n  }, function (err) {\n    console.log(err.message);\n    document.value = null;\n    error.value = 'could not fetch the data';\n  });\n  return {\n    error: error,\n    document: document\n  };\n};\n\nexport default getLesson;","map":{"version":3,"names":["ref","db","collection","onSnapshot","query","where","getDoc","doc","getLesson","c","mod","ord","documents","error","thevid","theID","colRef","snap","results","docs","forEach","push","data","id","value","err","console","log","message","document"],"sources":["/Users/docfrawley/Sites/srsite/src/composables/getLesson.js"],"sourcesContent":["import { ref } from 'vue'\nimport { db } from '../firebase/config'\nimport { collection, onSnapshot, query, where, getDoc, doc} from 'firebase/firestore'\n\nconst getLesson = (c, mod, ord) => {\n  \n  const documents= ref(null)\n  const error = ref(null)\n  const thevid = ref()\n  const theID =ref()\n\n  // register the firestore collection reference\n  let colRef = collection(db, c)\n  colRef = query(colRef, where(\"module\", \"==\", mod), where(\"order\", \"==\", ord))\n    \n  onSnapshot(colRef, snap => {\n    let results = []\n    snap.docs.forEach(doc => {\n      // must wait for the server to create the timestamp & send it back\n      results.push({...doc.data(), id: doc.id})\n    });\n    \n    // update values\n   \n\n    documents.value = results\n   \n    \n    error.value = null\n  }, err => {\n    console.log(err.message)\n    document.value = null\n    error.value = 'could not fetch the data'\n  })\n\n\n  \n  return {error, document}\n}\n\nexport default getLesson"],"mappings":";;;;AAAA,SAASA,GAAT,QAAoB,KAApB;AACA,SAASC,EAAT,QAAmB,oBAAnB;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,KAAjC,EAAwCC,KAAxC,EAA+CC,MAA/C,EAAuDC,GAAvD,QAAiE,oBAAjE;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,CAAD,EAAIC,GAAJ,EAASC,GAAT,EAAiB;EAEjC,IAAMC,SAAS,GAAEZ,GAAG,CAAC,IAAD,CAApB;EACA,IAAMa,KAAK,GAAGb,GAAG,CAAC,IAAD,CAAjB;EACA,IAAMc,MAAM,GAAGd,GAAG,EAAlB;EACA,IAAMe,KAAK,GAAEf,GAAG,EAAhB,CALiC,CAOjC;;EACA,IAAIgB,MAAM,GAAGd,UAAU,CAACD,EAAD,EAAKQ,CAAL,CAAvB;EACAO,MAAM,GAAGZ,KAAK,CAACY,MAAD,EAASX,KAAK,CAAC,QAAD,EAAW,IAAX,EAAiBK,GAAjB,CAAd,EAAqCL,KAAK,CAAC,OAAD,EAAU,IAAV,EAAgBM,GAAhB,CAA1C,CAAd;EAEAR,UAAU,CAACa,MAAD,EAAS,UAAAC,IAAI,EAAI;IACzB,IAAIC,OAAO,GAAG,EAAd;IACAD,IAAI,CAACE,IAAL,CAAUC,OAAV,CAAkB,UAAAb,GAAG,EAAI;MACvB;MACAW,OAAO,CAACG,IAAR,iCAAiBd,GAAG,CAACe,IAAJ,EAAjB;QAA6BC,EAAE,EAAEhB,GAAG,CAACgB;MAArC;IACD,CAHD,EAFyB,CAOzB;;IAGAX,SAAS,CAACY,KAAV,GAAkBN,OAAlB;IAGAL,KAAK,CAACW,KAAN,GAAc,IAAd;EACD,CAdS,EAcP,UAAAC,GAAG,EAAI;IACRC,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,OAAhB;IACAC,QAAQ,CAACL,KAAT,GAAiB,IAAjB;IACAX,KAAK,CAACW,KAAN,GAAc,0BAAd;EACD,CAlBS,CAAV;EAsBA,OAAO;IAACX,KAAK,EAALA,KAAD;IAAQgB,QAAQ,EAARA;EAAR,CAAP;AACD,CAlCD;;AAoCA,eAAerB,SAAf"},"metadata":{},"sourceType":"module"}