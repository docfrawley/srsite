{"ast":null,"code":"import _objectSpread from \"/Users/docfrawley/Sites/srsite/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { ref } from 'vue';\nimport { db } from '../firebase/config';\nimport { collection, onSnapshot, query, where, getDoc, doc } from 'firebase/firestore';\n\nvar getLesson = function getLesson(c, mod, ord) {\n  var document = ref({});\n  var error = ref(null); // register the firestore collection reference\n\n  var colRef = collection(db, c);\n  colRef = query(colRef, where(\"module\", \"==\", mod), where(\"order\", \"==\", ord));\n  onSnapshot(colRef, function (snap) {\n    var results = [];\n    snap.docs.forEach(function (doc) {\n      // must wait for the server to create the timestamp & send it back\n      results.push(_objectSpread(_objectSpread({}, doc.data()), {}, {\n        id: doc.id\n      }));\n    }); // update values\n\n    console.log('results: ', results);\n    console.log('0: ', results[0].length);\n    document.value = results[0];\n    error.value = null;\n  }, function (err) {\n    console.log(err.message);\n    document.value = null;\n    error.value = 'could not fetch the data';\n  });\n  return document;\n};\n\nexport default getLesson;","map":{"version":3,"names":["ref","db","collection","onSnapshot","query","where","getDoc","doc","getLesson","c","mod","ord","document","error","colRef","snap","results","docs","forEach","push","data","id","console","log","length","value","err","message"],"sources":["/Users/docfrawley/Sites/srsite/src/composables/getLesson.js"],"sourcesContent":["import { ref } from 'vue'\nimport { db } from '../firebase/config'\nimport { collection, onSnapshot, query, where, getDoc, doc} from 'firebase/firestore'\n\nconst getLesson = (c, mod, ord) => {\n  \n  const document= ref({})\n  const error = ref(null)\n \n\n  // register the firestore collection reference\n  let colRef = collection(db, c)\n  colRef = query(colRef, where(\"module\", \"==\", mod), where(\"order\", \"==\", ord))\n    \n  onSnapshot(colRef, snap => {\n    let results = []\n    snap.docs.forEach(doc => {\n      // must wait for the server to create the timestamp & send it back\n      results.push({...doc.data(), id: doc.id})\n    });\n    \n    // update values\n   \n    console.log('results: ', results)\n    console.log('0: ', results[0].length)\n    document.value = results[0]\n   \n    \n    error.value = null\n  }, err => {\n    console.log(err.message)\n    document.value = null\n    error.value = 'could not fetch the data'\n  })\n\n\n  \n  return document\n}\n\nexport default getLesson"],"mappings":";;;;AAAA,SAASA,GAAT,QAAoB,KAApB;AACA,SAASC,EAAT,QAAmB,oBAAnB;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,KAAjC,EAAwCC,KAAxC,EAA+CC,MAA/C,EAAuDC,GAAvD,QAAiE,oBAAjE;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,CAAD,EAAIC,GAAJ,EAASC,GAAT,EAAiB;EAEjC,IAAMC,QAAQ,GAAEZ,GAAG,CAAC,EAAD,CAAnB;EACA,IAAMa,KAAK,GAAGb,GAAG,CAAC,IAAD,CAAjB,CAHiC,CAMjC;;EACA,IAAIc,MAAM,GAAGZ,UAAU,CAACD,EAAD,EAAKQ,CAAL,CAAvB;EACAK,MAAM,GAAGV,KAAK,CAACU,MAAD,EAAST,KAAK,CAAC,QAAD,EAAW,IAAX,EAAiBK,GAAjB,CAAd,EAAqCL,KAAK,CAAC,OAAD,EAAU,IAAV,EAAgBM,GAAhB,CAA1C,CAAd;EAEAR,UAAU,CAACW,MAAD,EAAS,UAAAC,IAAI,EAAI;IACzB,IAAIC,OAAO,GAAG,EAAd;IACAD,IAAI,CAACE,IAAL,CAAUC,OAAV,CAAkB,UAAAX,GAAG,EAAI;MACvB;MACAS,OAAO,CAACG,IAAR,iCAAiBZ,GAAG,CAACa,IAAJ,EAAjB;QAA6BC,EAAE,EAAEd,GAAG,CAACc;MAArC;IACD,CAHD,EAFyB,CAOzB;;IAEAC,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBP,OAAzB;IACAM,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBP,OAAO,CAAC,CAAD,CAAP,CAAWQ,MAA9B;IACAZ,QAAQ,CAACa,KAAT,GAAiBT,OAAO,CAAC,CAAD,CAAxB;IAGAH,KAAK,CAACY,KAAN,GAAc,IAAd;EACD,CAfS,EAeP,UAAAC,GAAG,EAAI;IACRJ,OAAO,CAACC,GAAR,CAAYG,GAAG,CAACC,OAAhB;IACAf,QAAQ,CAACa,KAAT,GAAiB,IAAjB;IACAZ,KAAK,CAACY,KAAN,GAAc,0BAAd;EACD,CAnBS,CAAV;EAuBA,OAAOb,QAAP;AACD,CAlCD;;AAoCA,eAAeJ,SAAf"},"metadata":{},"sourceType":"module"}