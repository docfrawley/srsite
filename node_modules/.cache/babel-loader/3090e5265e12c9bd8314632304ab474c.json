{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _generated = require(\"../validators/generated\");\n\nvar _generated2 = require(\"../builders/generated\");\n\nvar _default = toStatement;\nexports.default = _default;\n\nfunction toStatement(node, ignore) {\n  if ((0, _generated.isStatement)(node)) {\n    return node;\n  }\n\n  let mustHaveId = false;\n  let newType;\n\n  if ((0, _generated.isClass)(node)) {\n    mustHaveId = true;\n    newType = \"ClassDeclaration\";\n  } else if ((0, _generated.isFunction)(node)) {\n    mustHaveId = true;\n    newType = \"FunctionDeclaration\";\n  } else if ((0, _generated.isAssignmentExpression)(node)) {\n    return (0, _generated2.expressionStatement)(node);\n  }\n\n  if (mustHaveId && !node.id) {\n    newType = false;\n  }\n\n  if (!newType) {\n    if (ignore) {\n      return false;\n    } else {\n      throw new Error(`cannot turn ${node.type} to a statement`);\n    }\n  }\n\n  node.type = newType;\n  return node;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_generated","require","_generated2","_default","toStatement","node","ignore","isStatement","mustHaveId","newType","isClass","isFunction","isAssignmentExpression","expressionStatement","id","Error","type"],"sources":["/Users/docfrawley/Sites/NVoge/srsite/node_modules/@babel/types/lib/converters/toStatement.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _generated = require(\"../validators/generated\");\n\nvar _generated2 = require(\"../builders/generated\");\n\nvar _default = toStatement;\nexports.default = _default;\n\nfunction toStatement(node, ignore) {\n  if ((0, _generated.isStatement)(node)) {\n    return node;\n  }\n\n  let mustHaveId = false;\n  let newType;\n\n  if ((0, _generated.isClass)(node)) {\n    mustHaveId = true;\n    newType = \"ClassDeclaration\";\n  } else if ((0, _generated.isFunction)(node)) {\n    mustHaveId = true;\n    newType = \"FunctionDeclaration\";\n  } else if ((0, _generated.isAssignmentExpression)(node)) {\n    return (0, _generated2.expressionStatement)(node);\n  }\n\n  if (mustHaveId && !node.id) {\n    newType = false;\n  }\n\n  if (!newType) {\n    if (ignore) {\n      return false;\n    } else {\n      throw new Error(`cannot turn ${node.type} to a statement`);\n    }\n  }\n\n  node.type = newType;\n  return node;\n}"],"mappings":"AAAA;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,yBAAD,CAAxB;;AAEA,IAAIC,WAAW,GAAGD,OAAO,CAAC,uBAAD,CAAzB;;AAEA,IAAIE,QAAQ,GAAGC,WAAf;AACAP,OAAO,CAACE,OAAR,GAAkBI,QAAlB;;AAEA,SAASC,WAAT,CAAqBC,IAArB,EAA2BC,MAA3B,EAAmC;EACjC,IAAI,CAAC,GAAGN,UAAU,CAACO,WAAf,EAA4BF,IAA5B,CAAJ,EAAuC;IACrC,OAAOA,IAAP;EACD;;EAED,IAAIG,UAAU,GAAG,KAAjB;EACA,IAAIC,OAAJ;;EAEA,IAAI,CAAC,GAAGT,UAAU,CAACU,OAAf,EAAwBL,IAAxB,CAAJ,EAAmC;IACjCG,UAAU,GAAG,IAAb;IACAC,OAAO,GAAG,kBAAV;EACD,CAHD,MAGO,IAAI,CAAC,GAAGT,UAAU,CAACW,UAAf,EAA2BN,IAA3B,CAAJ,EAAsC;IAC3CG,UAAU,GAAG,IAAb;IACAC,OAAO,GAAG,qBAAV;EACD,CAHM,MAGA,IAAI,CAAC,GAAGT,UAAU,CAACY,sBAAf,EAAuCP,IAAvC,CAAJ,EAAkD;IACvD,OAAO,CAAC,GAAGH,WAAW,CAACW,mBAAhB,EAAqCR,IAArC,CAAP;EACD;;EAED,IAAIG,UAAU,IAAI,CAACH,IAAI,CAACS,EAAxB,EAA4B;IAC1BL,OAAO,GAAG,KAAV;EACD;;EAED,IAAI,CAACA,OAAL,EAAc;IACZ,IAAIH,MAAJ,EAAY;MACV,OAAO,KAAP;IACD,CAFD,MAEO;MACL,MAAM,IAAIS,KAAJ,CAAW,eAAcV,IAAI,CAACW,IAAK,iBAAnC,CAAN;IACD;EACF;;EAEDX,IAAI,CAACW,IAAL,GAAYP,OAAZ;EACA,OAAOJ,IAAP;AACD"},"metadata":{},"sourceType":"script"}